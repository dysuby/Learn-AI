from utils import read_tsp, genAnimation
from Solution import Solution
import numpy as np

nodes = read_tsp('a280.tsp')

best = nodes[np.array([1
,2
,242
,243
,244
,241
,240
,239
,238
,237
,236
,235
,234
,233
,232
,231
,246
,245
,247
,250
,251
,230
,229
,228
,227
,226
,225
,224
,223
,222
,221
,220
,219
,218
,217
,216
,215
,214
,213
,212
,211
,210
,207
,206
,205
,204
,203
,202
,201
,198
,197
,196
,195
,194
,193
,192
,191
,190
,189
,188
,187
,186
,185
,184
,183
,182
,181
,176
,180
,179
,150
,178
,177
,151
,152
,156
,153
,155
,154
,129
,130
,131
,20
,21
,128
,127
,126
,125
,124
,123
,122
,121
,120
,119
,157
,158
,159
,160
,175
,161
,162
,163
,164
,165
,166
,167
,168
,169
,170
,172
,171
,173
,174
,107
,106
,105
,104
,103
,102
,101
,100
,99
,98
,97
,96
,95
,94
,93
,92
,91
,90
,89
,109
,108
,110
,111
,112
,88
,87
,113
,114
,115
,117
,116
,86
,85
,84
,83
,82
,81
,80
,79
,78
,77
,76
,75
,74
,73
,72
,71
,70
,69
,68
,67
,66
,65
,64
,58
,57
,56
,55
,54
,53
,52
,51
,50
,49
,48
,47
,46
,45
,44
,59
,63
,62
,118
,61
,60
,43
,42
,41
,40
,39
,38
,37
,36
,35
,34
,33
,32
,31
,30
,29
,28
,27
,26
,22
,25
,23
,24
,14
,15
,13
,12
,11
,10
,9
,8
,7
,6
,5
,4
,277
,276
,275
,274
,273
,272
,271
,16
,17
,18
,19
,132
,133
,134
,270
,269
,135
,136
,268
,267
,137
,138
,139
,149
,148
,147
,146
,145
,199
,200
,144
,143
,142
,141
,140
,266
,265
,264
,263
,262
,261
,260
,259
,258
,257
,254
,253
,208
,209
,252
,255
,256
,249
,248
,278
,279
,3
,280]) - 1]

my = np.array([[ 16,  97],
 [ 24,  89],
 [ 32,  89],
 [ 32,  97],
 [ 40,  99],
 [ 48,  99],
 [ 56,  97],
 [ 56, 105],
 [ 56, 113],
 [ 56, 121],
 [ 40, 121],
 [ 40, 113],
 [ 32, 113],
 [ 32, 121],
 [ 32, 129],
 [ 32, 137],
 [ 32, 145],
 [ 32, 153],
 [ 32, 161],
 [ 32, 169],
 [ 40, 169],
 [ 40, 161],
 [ 40, 153],
 [ 40, 145],
 [ 40, 137],
 [ 40, 129],
 [ 56, 129],
 [ 56, 137],
 [ 56, 145],
 [ 56, 153],
 [ 56, 161],
 [ 56, 169],
 [ 64, 165],
 [ 64, 157],
 [ 80, 157],
 [ 90, 165],
 [104, 169],
 [104, 161],
 [104, 153],
 [116, 161],
 [124, 169],
 [132, 169],
 [140, 169],
 [148, 169],
 [156, 169],
 [164, 169],
 [172, 169],
 [188, 169],
 [196, 169],
 [196, 161],
 [204, 169],
 [212, 169],
 [220, 169],
 [228, 161],
 [228, 169],
 [236, 169],
 [246, 157],
 [256, 157],
 [256, 141],
 [246, 141],
 [236, 145],
 [228, 145],
 [220, 145],
 [212, 145],
 [204, 145],
 [196, 145],
 [188, 145],
 [172, 145],
 [164, 145],
 [156, 145],
 [156, 137],
 [164, 137],
 [172, 125],
 [180, 125],
 [180, 117],
 [172, 117],
 [172, 109],
 [180 ,109],
 [180, 101],
 [172 ,101],
 [172,  93],
 [172,  85],
 [164,  81],
 [172,  77],
 [180,  77],
 [180,  85],
 [180,  93],
 [188,  93],
 [196 ,101],
 [204 ,109],
 [212 ,117],
 [220 ,125],
 [228 ,125],
 [228 ,117],
 [228 ,109],
 [228 ,101],
 [228 , 93],
 [236 , 93],
 [236 ,101],
 [252 ,101],
 [260 ,109],
 [252 ,125],
 [260 ,129],
 [270 ,133],
 [280 ,133],
 [288 ,149],
 [288 ,129],
 [288 ,109],
 [280 ,109],
 [284 ,101],
 [284 , 93],
 [284 , 85],
 [284  ,77],
 [284  ,69],
 [284  ,61],
 [284  ,53],
 [276  ,53],
 [276  ,61],
 [276  ,69],
 [276  ,77],
 [276 , 85],
 [276 , 93],
 [276 ,101],
 [268 , 97],
 [260 , 93],
 [260 , 85],
 [260 , 77],
 [260 , 69],
 [260 , 61],
 [260 , 53],
 [260 , 45],
 [260 , 37],
 [260 , 29],
 [252 , 21],
 [236 , 21],
 [228 , 21],
 [228 , 29],
 [236 , 29],
 [236 , 37],
 [228 , 37],
 [228 , 45],
 [236 , 45],
 [236 , 53],
 [228 , 53],
 [228 , 61],
 [236 , 61],
 [236 , 69],
 [236 , 77],
 [236 , 85],
 [228 , 85],
 [228 , 77],
 [228 , 69],
 [220 , 73],
 [212 , 65],
 [204 , 57],
 [196 , 49],
 [188 , 41],
 [180 , 45],
 [180 , 53],
 [180 , 61],
 [180 , 69],
 [172 , 69],
 [172 , 61],
 [172 , 53],
 [172 , 45],
 [172 , 37],
 [180 , 37],
 [180 , 29],
 [180 , 21],
 [172 , 21],
 [172 , 29],
 [156 , 25],
 [162 ,  9],
 [148 ,  9],
 [136 ,  9],
 [128 ,  9],
 [120 ,  9],
 [124 , 21],
 [132 , 21],
 [124 , 29],
 [124 , 37],
 [124 , 45],
 [124 , 53],
 [124 , 61],
 [124,  69],
 [132,  61],
 [140,  65],
 [148,  85],
 [132,  81],
 [124,  77],
 [124,  85],
 [124,  93],
 [124, 101],
 [124, 109],
 [124, 117],
 [124, 125],
 [132, 137],
 [140, 137],
 [148, 137],
 [148, 145],
 [140, 145],
 [132, 145],
 [124, 145],
 [116, 145],
 [104, 145],
 [104, 137],
 [104, 129],
 [104, 121],
 [104, 113],
 [104, 105],
 [104,  97],
 [104,  89],
 [104,  81],
 [104,  73],
 [104,  65],
 [104,  57],
 [104,  49],
 [104,  41],
 [104,  33],
 [104,  25],
 [104,  17],
 [ 92,   9],
 [ 80,   9],
 [ 72,   9],
 [ 64,  21],
 [ 72,  25],
 [ 80,  25],
 [ 80,  25],
 [ 80,  41],
 [ 88,  49],
 [ 72,  49],
 [ 72,  41],
 [ 64,  41],
 [ 56,  41],
 [ 56,  33],
 [ 56,  25],
 [ 56,  17],
 [ 56,   9],
 [ 44,  11],
 [ 32,  17],
 [ 24,  17],
 [ 16,  17],
 [ 16,  25],
 [ 24,  25],
 [ 32,  25],
 [ 44,  27],
 [ 44,  35],
 [ 44,  43],
 [ 40,  51],
 [ 48,  51],
 [ 56,  49],
 [ 56,  57],
 [ 56,  65],
 [ 48,  63],
 [ 40,  63],
 [ 40,  73],
 [ 48,  73],
 [ 56,  73],
 [ 56,  81],
 [ 56,  89],
 [ 48,  83],
 [ 40,  83],
 [ 32,  81],
 [ 32,  73],
 [ 32,  65],
 [ 32,  57],
 [ 32,  49],
 [ 32,  41],
 [ 24,  45],
 [  8,  41],
 [  8,  49],
 [ 16,  57],
 [  8,  57],
 [  8,  65],
 [  8,  73],
 [  8,  81],
 [  8,  89],
 [  8,  97],
 [  8, 109],
 [ 16, 109]])

# index = 0
# for i in range(280):
#     if my[i][0] == best[0][0] and my[i][1] == best[0][1]:
#         index = i
#         break

cost = 0
for i in range(1, len(my)):
        cost += np.linalg.norm(my[i] -
                                my[i - 1])
cost += np.linalg.norm(my[0] -
                        my[-1])

print(cost)

genAnimation([Solution(my, cost)])